import { serve } from "https://deno.land/std@0.190.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'
import { Resend } from "npm:resend@2.0.0";

const resend = new Resend(Deno.env.get("RESEND_API_KEY"));

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

interface EmailRequest {
  to: string;
  subject: string;
  content: string;
  type: 'notification' | 'reminder' | 'integration' | 'response';
  notificationId?: string;
}

const getEmailTemplate = (type: string, content: string, subject: string) => {
  const baseStyle = `
    <div style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; background-color: #ffffff;">
      <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 20px; border-radius: 8px 8px 0 0; text-align: center;">
        <h1 style="color: white; margin: 0; font-size: 24px;">ZERO Dashboard</h1>
      </div>
      <div style="padding: 30px; border: 1px solid #e1e5e9; border-top: none; border-radius: 0 0 8px 8px;">
  `;

  const footer = `
      </div>
      <div style="text-align: center; padding: 20px; color: #666; font-size: 14px;">
        <p>This email was sent from your ZERO Dashboard</p>
        <p>Â© 2024 ZERO. All rights reserved.</p>
      </div>
    </div>
  `;

  switch (type) {
    case 'notification':
      return baseStyle + `
        <h2 style="color: #333; margin-bottom: 16px;">${subject}</h2>
        <div style="background-color: #f8f9fa; padding: 16px; border-radius: 6px; margin-bottom: 20px;">
          <p style="margin: 0; color: #555; line-height: 1.6;">${content}</p>
        </div>
        <p style="color: #666; font-size: 14px;">You can manage your notification preferences in your dashboard settings.</p>
      ` + footer;

    case 'response':
      return baseStyle + `
        <h2 style="color: #333; margin-bottom: 16px;">AI Generated Response</h2>
        <div style="background-color: #f0f8ff; padding: 16px; border-radius: 6px; margin-bottom: 20px; border-left: 4px solid #667eea;">
          <p style="margin: 0; color: #555; line-height: 1.6;">${content}</p>
        </div>
        <p style="color: #666; font-size: 14px;">This response was generated by AI based on your notification content.</p>
      ` + footer;

    case 'reminder':
      return baseStyle + `
        <h2 style="color: #333; margin-bottom: 16px;">ðŸ”” Reminder: ${subject}</h2>
        <div style="background-color: #fff3cd; padding: 16px; border-radius: 6px; margin-bottom: 20px; border-left: 4px solid #ffc107;">
          <p style="margin: 0; color: #555; line-height: 1.6;">${content}</p>
        </div>
        <p style="color: #666; font-size: 14px;">You can manage your reminders in your dashboard.</p>
      ` + footer;

    case 'integration':
      return baseStyle + `
        <h2 style="color: #333; margin-bottom: 16px;">ðŸ”— Integration Update</h2>
        <div style="background-color: #d4edda; padding: 16px; border-radius: 6px; margin-bottom: 20px; border-left: 4px solid #28a745;">
          <p style="margin: 0; color: #555; line-height: 1.6;">${content}</p>
        </div>
        <p style="color: #666; font-size: 14px;">Check your integrations page for more details.</p>
      ` + footer;

    default:
      return baseStyle + `
        <h2 style="color: #333; margin-bottom: 16px;">${subject}</h2>
        <p style="color: #555; line-height: 1.6;">${content}</p>
      ` + footer;
  }
};

const handler = async (req: Request): Promise<Response> => {
  if (req.method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    // Check if this is a service role call (from database) or user call
    const authHeader = req.headers.get('Authorization');
    const isServiceCall = authHeader?.includes(Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') || '');
    
    let user = null;
    
    if (!isServiceCall) {
      // Verify user authentication for frontend calls
      if (!authHeader) {
        throw new Error('No authorization header');
      }

      const supabaseClient = createClient(
        Deno.env.get('SUPABASE_URL') ?? '',
        Deno.env.get('SUPABASE_ANON_KEY') ?? ''
      );

      const { data: { user: authUser }, error: authError } = await supabaseClient.auth.getUser(
        authHeader.replace('Bearer ', '')
      );

      if (authError || !authUser) {
        throw new Error('Invalid user token');
      }
      
      user = authUser;
    }
    
    console.log('Email request - Service call:', isServiceCall, 'User ID:', user?.id);

    const { to, subject, content, type, notificationId }: EmailRequest = await req.json();

    if (!to || !subject || !content) {
      throw new Error('Missing required fields: to, subject, content');
    }

    const htmlContent = getEmailTemplate(type, content, subject);

    const emailResponse = await resend.emails.send({
      from: "ZERO Dashboard <onboarding@resend.dev>",
      to: [to],
      subject: subject,
      html: htmlContent,
    });

    // Log the email send in the database
    if (notificationId) {
      await supabaseClient
        .from('notifications')
        .update({ 
          metadata: { 
            ...((await supabaseClient.from('notifications').select('metadata').eq('id', notificationId).single()).data?.metadata || {}),
            email_sent: true,
            email_id: emailResponse.data?.id,
            sent_at: new Date().toISOString()
          } 
        })
        .eq('id', notificationId);
    }

    return new Response(
      JSON.stringify({ 
        success: true, 
        emailId: emailResponse.data?.id,
        message: 'Email sent successfully' 
      }),
      {
        status: 200,
        headers: { ...corsHeaders, "Content-Type": "application/json" },
      }
    );

  } catch (error: any) {
    console.error("Error sending email:", error);
    return new Response(
      JSON.stringify({ 
        success: false, 
        error: error.message 
      }),
      {
        status: 500,
        headers: { ...corsHeaders, "Content-Type": "application/json" },
      }
    );
  }
};

serve(handler);